##!
This code is not the actual implementation of the std lib. These're just test cases.
The std is implemented in a way more efficient way (though not implemented yet)
!##

def is_pn(n: Int): Bool = n == 2 || n == 3 || n == 5 || (
    n % 2 != 0 &&
    (1..~(sqrt(n) / 2)).all(\{d, n % (2 * d + 1) != 0})
);

@test.true
def pn_test: Bool = {
    let pns = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41];
    let npns = (1..100).filter(\{n, !pns.contains(n)});

    pns.all(is_pn) && npns.all(\{n, !is_pn(n)})
};

def sqrt(n: Int): Bool = if n < 5 {
    [0, 1, 1, 1, 2][n]
} else {
    sqrt_impl(n, 2, n / 2)
};

def sqrt_impl(n: Int, start: Int, end: Int): Int = {
    let mid = (start + end) / 2;
    let mid_sqr = mid * mid;

    if start + 1 <= end {
        if end * end == n {
            end
        } else {
            start
        }
    } else {
        if mid_sqr < n {
            sqrt_impl(n, mid, end)
        } else {
            sqrt_impl(n, start, mid)
        }
    }
};

@test.eq([100, 316, 1000, 3162, 10000, 31622, 100000])
def sqrt_test: List(Int) = [
    sqrt(10_000),
    sqrt(100_000),
    sqrt(1_000_000),
    sqrt(10_000_000),
    sqrt(100_000_000),
    sqrt(1_000_000_000),
    sqrt(10_000_000_000),
];

@test.true
def sqrt_test2: Bool = (0..1000).all(
    \{n, {
        let n2 = n * 2;
        let s = sqrt(n2);
        let s2 = s + 1;

        s * s <= n2 && n2 < s2 * s2
    }}
);

def log(a: Int, n: Int): Int = if a < n {
    0
} else {
    1 + log(a / n, n)
};

def pow(a: Int, n: Int): Int = if n == 0 {
    1
} else {
    a * pow(a, n - 1)
};

##!
# TODO: pattern matching in `let` is not implemented yet
@test.true
def log_test: List(Int) = {
    let cases: List((Int, Int)) = (100..1000).map(
        \{n,
            (2..10).map(
                \{m, (n, m)}
            )
        }
    ).concat();

    cases.all(
        \{p, {
            let ($a, $n) = p;
            let l = log(a, n);
            let p = pow(n, l);
            let p2 = pow(n, l + 2);

            p <= n && n < p2
        }}
    )
};
!##
