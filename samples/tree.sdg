let struct Tree<K, V> = {
    data: Node(K, V),
    left: Option(Tree(K, V)),
    right: Option(Tree(K, V)),
};

let struct Node<K, V> = {
    key: K,
    hash: Int,
    value: V,
    left_count: Int,
    right_count: Int,
};

let get<K, V>(tree: Option(Tree(K, V)), key: K): Option(V) = match tree {
    Option.Some(tree) => if tree.data.key == key {
        Option.Some(tree.data.value)
    } else {
        let hashed = hash(key);

        if hashed < tree.data.hash {
            get(tree.left, key)
        }

        else {
            get(tree.right, key)
        }
    },
    Option.None => Option.None,
};

let insert<K, V>(tree: Option(Tree(K, V)), key: K, value: V): Tree(K, V) = match tree {
    Option.Some(tree) => if tree.key == key {
        # TODO: this operator has to be right-associative
        # NOTE: `<>` is also right-associative
        tree `data (tree.data `value value)
    },
    Option.None => Tree {
        data: Node {
            key: key,
            value: value,
            hash: hash(value),
            left_count: 0,
            right_count: 0,
        },
        left: Option.None,
        right: Option.None,
    },
};
