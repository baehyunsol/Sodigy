@test.eq(43)
let functor_test: Int = {
    let adder = \{x, \{y, x + y}};
    let adder1 = adder(1);
    let adder2 = adder(2);

    adder1(20) + adder2(20)
};

@test.eq(10946)
let mutual_fibo: Int = {
    let n = 20;
    let fibo1 = \{n, if n < 2 { 1 } else { fibo1(n - 1) + fibo2(n - 2) }};
    let fibo2 = \{n, if n < 2 { 1 } else { fibo2(n - 1) + fibo1(n - 2) }};

    fibo2(n)
};

@test.eq(1307674368000)
let factorial: Int = {
    let n = 15;
    let fac = \{n, if n < 2 { 1 } else { n * fac(n - 1) }};

    fac(n)
};

let id<T>(x: T): T = x;

@test.eq(10946)
let mutual_fibo2: Int = {
    let n = 20;
    let fibo1 = id(\{n, if n < 2 { 1 } else { fibo1(n - 1) + fibo2(n - 2) }});
    let fibo2 = id(\{n, if n < 2 { 1 } else { fibo2(n - 1) + fibo1(n - 2) }});

    fibo2(n)
};

@test.eq(1307674368000)
let factorial2: Int = {
    let n = 15;
    let fac = id(\{n, if n < 2 { 1 } else { n * fac(n - 1) }});

    fac(n)
};

# Make sure that the compiler warns: '`y` is unused!'
let lambdas(x: Int, y: Int): Int = \{
    \{
        \{y, z, x + y + z}
    }
};

@test.eq(111)
let lambdas_test: Int = lambdas(3, 9)()()(27, 81);

let closures_test(x: Int, y: Int): Int = \{
    y: Int, z: Int,
    \{z: Int, w: Int, x + y + z + w}
};

@test.eq(106)
let closures_test_runner = closures_test(2, 4)(8, 16)(32, 64);

# type signatures of functors: the last one is the ret_type
let adder(n: Int): Func(Int, Int) = \{x: Int, x + n};

@test.eq([8, 16])
let adder_test: List(Int) = [adder(3)(5), adder(7)(9)];

@test.eq(9 + (81 + (3 + 27 + 243 + 729)))
let name_scope_test: Int = {
    let a = 3; let b = 9;
    b + {
        let b = 27; let c = 81;
        c + {
            let c = 243; let d = 729;
            a + b + c + d
        }
    }
};

@test.eq(999999999999999999999940837306036211360320144)
let big_number_test: Int = {
    let a = 31622776601683793319988;

    a * a
};

@test.eq("3 + 4 = 7")
let format_string_test: String = {
    let a = 3;
    let b = 4;

    f"{a} + {b} = {a + b}"
};

@test.eq(["7", "{3 + 4}", "{7}"])
let format_string_test2: String = [
    f"{3 + 4}",
    f"{{3 + 4}}",
    f"{{{3 + 4}}}",
];

@test.eq([1, 2, 3, 4, 5, 6])
let concats = [1, 2, 3] <> [4, 5, 6];

let add1(x: Int, y: Int, z: Int): Int = \{x + y + z + 1};

@test.eq([13, 14])
let add1_test: List(Int) = [
    add1(3, 4, 5)(),
    add1(3, 4, 6)(),
];

let enum MyOption<T> = {
    None,
    Some(T),
};

let my_map<T, U>(opt: MyOption(T), f: Func(T, U)): MyOption(U) = match opt {
    MyOption.Some($x) => MyOption.Some(f(x)),
    _ => MyOption.None,
};

@test.eq([MyOption.Some(5), MyOption.None])
let my_map_test: List(MyOption(Int)) = {
    let f = \{n, n + 1};

    [
        my_map(MyOption.Some(4), f),
        my_map(MyOption.None, f),
    ]
};

@test.eq(())
let EMPTY_TUPLE: () = ();

@test.eq([])
let EMPTY_LIST: List(Int) = [];

# It's okay for braces to be unmatched!
@test.eq(["{1", "{{1", "{1 {1"])
let format_string_not_an_error = [f"{1", f"{{1", f"{1 {1"];

@test.eq(42)
let fourty_two = {
    let z = x + y;
    let x = 9;
    let y = 12;

    x + y + z
};

@test.true
let bitwise_funcs = {
    let sample = [
    #   (number, leading_ones, trailing_ones, trailing_zeros, count_ones, ilog2)
        (0b1110101, 3, 1, 0, 5, 7),
        (0b1010111, 1, 3, 0, 5, 7),
        (0b101000,  1, 0, 3, 2, 6),
        (0b101,     1, 1, 0, 2, 3),
        (0xfff_fff, 24, 24, 0, 24, 24),
    ];

    sample.all(\{
        sample,
        sample == (
            sample._0,
            sample._0.leading_ones(),
            sample._0.trailing_ones(),
            sample._0.trailing_zeros(),
            sample._0.count_ones(),
            sample._0.ilog2(),
        )
    })
};

# I want these to be included in STD
# TODO: write test for these
@method(Int)
let first_n_bits(a: Int, n: Int) = {
  let log2 = a.ilog2();

  if log2 < n || n < 0 {
    panic()
  }

  else {
    (a & (((1 << n) - 1) << (log2 - n))) >> (log2 - n)
  }
};

@method(Int)
let last_n_bits(a: Int, n: Int): Int = if n < 0 {
  panic()
} else {
  a & ((1 << n) - 1)
};
