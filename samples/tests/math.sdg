##!
This code is not the actual implementation of the std lib. These're just test cases.
The std is implemented in a way more efficient way (though not implemented yet)
!##

let is_pn(n: Int): Bool = n == 2 || n == 3 || n == 5 || (
    n % 2 != 0 &&
    (1..~(sqrt(n) / 2)).all(\{d, n % (2 * d + 1) != 0})
);

@test.true
let pn_test: Bool = {
    let pns = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41];
    let npns = (1..100).filter(\{n, !pns.contains(n)});

    pns.all(is_pn) && npns.all(\{n, !is_pn(n)})
};

##> It returns the square root of `n`.
##> If the result is not integer, it's truncated.
##> If `n` is negative, it returns `sqrt(-n)`.
# TODO: panic when `n < 0`?
@test.after(\{ret, assert(
    ret * ret <= abs(n)
    && (ret + 1) * (ret + 1) > abs(n)
)})
let sqrt(n: Int): Int = match n {
    $n if n < 0 => sqrt(-n),
    0 => 0,
    1..4 => 1,
    4..9 => 2,
    _ => sqrt_iter(n / 9, n),
};

let sqrt_iter(curr: Int, n: Int): Int = {
    let res = (curr + n / curr) / 2;
    let res2 = (res + n / res) / 2;

    if curr == res2 {
        min(res, res2)
    } else {
        sqrt_iter(res2, n)
    }
};

@test.eq([
    100, 316, 1_000, 3_162,
    10_000, 31_622, 100_000,
    316_227, 1_000_000,
    3_162_277, 10_000_000,
    31_622_776, 100_000_000,
])
let sqrt_test: List(Int) = [
    sqrt(10_000),
    sqrt(100_000),
    sqrt(1_000_000),
    sqrt(10_000_000),
    sqrt(100_000_000),
    sqrt(1_000_000_000),
    sqrt(10_000_000_000),
    sqrt(100_000_000_000),
    sqrt(1_000_000_000_000),
    sqrt(10_000_000_000_000),
    sqrt(100_000_000_000_000),
    sqrt(1_000_000_000_000_000),
    sqrt(10_000_000_000_000_000),
];

let log(a: Int, n: Int): Int = if a < n {
    0
} else {
    1 + log(a / n, n)
};

let pow(a: Int, n: Int): Int = if n == 0 {
    1
} else {
    a * pow(a, n - 1)
};

@test.true
let log_test: List(Int) = {
    let cases: List((Int, Int)) = (100..1000).map(
        \{n,
            (2..10).map(
                \{m, (n, m)}
            )
        }
    ).concat();

    cases.all(
        \{p, {
            let pattern ($a, $n) = p;
            let l = log(a, n);
            let p = pow(n, l);
            let p2 = pow(n, l + 2);

            p <= n && n < p2
        }}
    )
};
