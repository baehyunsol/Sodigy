let match_num(n: Int): Int = match n {
    0 | 1 | 2 => 0,
    3..10 => 100,
    10..~20 => 200,
    -20..-10 => 300,
    $etc => etc + 1,
};

@test.eq([
    0, 0, 0,
    100, 100, 200,
    300, -9, -3,
    1001,
])
let match_num_test = [
    match_num(0), match_num(1), match_num(2),
    match_num(4), match_num(5), match_num(10),
    match_num(-20), match_num(-10), match_num(-4),
    match_num(1000),
];

let match_char(c: Char): String = match c {
    '0'..~'9' => "Digit",
    'a'..~'z' => "Lower",
    'A'..~'Z' => "Upper",
    $c if c <= '~' => "Ascii Punct",
    _ => "Non Ascii",
};

@test.eq("DDDLLLUUUAAANNN")
let match_char_test = {
    let matches = [
        match_char('0'), match_char('1'), match_char('2'),
        match_char('a'), match_char('b'), match_char('c'),
        match_char('A'), match_char('B'), match_char('C'),
        match_char('%'), match_char('^'), match_char('&'),
        match_char('가'), match_char('나'), match_char('다'),
    ];

    matches.map(\{s, s[0]}).join("")
};

let match_str(s: String): String = match s {
    "abc".. => "a",
    .."def" => "b",
    "a".."b".."c".."d" => "c",
    _ => "d",
};

@test.eq("abcd")
let match_str_test = [
    match_str("abcd"),
    match_str("cdef"),
    match_str("aaabbbcccddd"),
    match_str("xyz"),
].join("");

let unwrap_or_0(n: Option(Int)): Int = match n {
    Option.Some($n) => n,
    Option.None => 0,
};

let name_bindings(x: Int, y: Int, z: Int): Tuple(Int, Int) = match (x, y, z) {
    (3, $res @ ..) => res,
    ($res @ ..) => (res._0, res._1),
    _ => (2, 3),
};

@test.eq(3)
let tuples_in_let = {
    let pattern ($x, ($y, $z)) = (0, (1, 2));

    # empty patterns hahaha
    let pattern () = ();
    let pattern ((), ()) = ((), ());

    x + y + z
};

@test.eq(11)
let tuples_in_let2 = {
    let pattern ($x, $y, .., $z, _) = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
    let pattern (_, (), (), .., _, $w, _) = (0, (), (), (), (), 2, ());

    x + y + z + w
};

@test.eq((1, 2, 3, 4))
let shorthand_tests = {
    let pattern (_, $x @ .., _, _) = (0, 1, 2, 3, 4, 5, 6);

    x
};

@test.eq(7)
let if_pattern_test = if pattern ((), ($x, $y)) = ((), (3, 4)) { x + y } else { 5 };

let struct Foo = {
    x: Int,
    y: Bar,
};

let struct Bar = {
    y: Int,
    z: Int,
};

@test.eq(345)
let struct_test = {
    let pattern Foo { x: $x, y: Bar { y: $y, z: $z } } = Foo {
        x: 300,
        y: Bar {
            y: 40,
            z: 5,
        },
    };

    x + y + z
};

let struct_test_worker(b: Bar) = match b {
    Bar { y: $yy @ 0..50, z: _ } => f"\{yy}!",
    Bar { y: $yy @ (1 | 2), .. } => f"\{yy} is one or two",
    _ => "nope",
};

@test.eq("35!")
let struct_test2 = struct_test_worker(Bar { y: 35, z: 100 });

@test.eq("nope")
let struct_test3 = struct_test_worker(Bar { y: 100, z: 35 });

@test.eq("1 is one or two")
let struct_test4 = struct_test_worker(Bar { y: 1, z: 100 });
